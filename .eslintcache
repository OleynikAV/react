[{"C:\\Users\\andrey\\WebstormProjects\\react\\src\\index.js":"1","C:\\Users\\andrey\\WebstormProjects\\react\\src\\reportWebVitals.js":"2","C:\\Users\\andrey\\WebstormProjects\\react\\src\\App.js":"3","C:\\Users\\andrey\\WebstormProjects\\react\\src\\reduсers\\index.js":"4","C:\\Users\\andrey\\WebstormProjects\\react\\src\\firebase.js":"5","C:\\Users\\andrey\\WebstormProjects\\react\\src\\reduсers\\itemsStore.js":"6","C:\\Users\\andrey\\WebstormProjects\\react\\src\\components\\navbar.js":"7","C:\\Users\\andrey\\WebstormProjects\\react\\src\\components\\authorization.js":"8","C:\\Users\\andrey\\WebstormProjects\\react\\src\\pages\\PagesEditingItem.js":"9","C:\\Users\\andrey\\WebstormProjects\\react\\src\\pages\\Listitems.js":"10","C:\\Users\\andrey\\WebstormProjects\\react\\src\\pages\\PagesaddItem.js":"11"},{"size":659,"mtime":1610460768234,"results":"12","hashOfConfig":"13"},{"size":375,"mtime":1609140586205,"results":"14","hashOfConfig":"13"},{"size":4060,"mtime":1610952633201,"results":"15","hashOfConfig":"13"},{"size":463,"mtime":1610952633210,"results":"16","hashOfConfig":"13"},{"size":612,"mtime":1610350322310,"results":"17","hashOfConfig":"13"},{"size":895,"mtime":1610952633211,"results":"18","hashOfConfig":"13"},{"size":1213,"mtime":1610953100339,"results":"19","hashOfConfig":"13"},{"size":2063,"mtime":1610952633203,"results":"20","hashOfConfig":"13"},{"size":4181,"mtime":1610952633207,"results":"21","hashOfConfig":"13"},{"size":1741,"mtime":1610952633205,"results":"22","hashOfConfig":"13"},{"size":3427,"mtime":1610952633208,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1xjnhnx",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"26"},"C:\\Users\\andrey\\WebstormProjects\\react\\src\\index.js",[],["52","53"],"C:\\Users\\andrey\\WebstormProjects\\react\\src\\reportWebVitals.js",[],"C:\\Users\\andrey\\WebstormProjects\\react\\src\\App.js",["54","55","56"],"import React,{useState,useEffect} from 'react'\r\nimport './App.scss'\r\n\r\nimport fire from \"./firebase\";\r\nimport Authorization from './components/authorization'\r\nimport Navbar from \"./components/navbar\";\r\nimport base from \"./firebase\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n    const stateUsers = useSelector(state => state.storeUsers.users)\r\n\r\n\r\n    const  [email , setEmail] = useState('');\r\n    const  [password, setPassword] = useState('');\r\n    const  [emailError, setEmailError] = useState('');\r\n    const  [passwordError , setPasswordError] = useState('');\r\n    const  [hasAccount , setHasAccount] = useState(false);\r\n\r\n    const clearInputs = ()=>{\r\n        setEmail('');\r\n        setPassword('');\r\n\r\n    }\r\n    const  clearErrors = ()=>{\r\n        setEmailError('');\r\n        setPasswordError('');\r\n    }\r\n\r\n    const  handleLogin = ()=>{\r\n        clearErrors()\r\n        fire\r\n            .auth()\r\n            .signInWithEmailAndPassword(email,password)\r\n            .catch((err)=>{\r\n                switch (err.code){\r\n                    case 'auth/invalid-email':\r\n                    case \"auth/user-disabled\":\r\n                    case \"auth/user-nor-found\":\r\n                        setEmailError(err.message);\r\n                        break;\r\n                    case \"auth/wrong-password\":\r\n                        setPasswordError(err.message);\r\n                        break;\r\n                }\r\n            })\r\n    }\r\n    const  handleSignup = ()=>{\r\n        clearErrors()\r\n        fire\r\n            .auth()\r\n            .createUserWithEmailAndPassword(email,password)\r\n            .catch((err)=>{\r\n                switch (err.code){\r\n                    case 'auth/email-already-in-use':\r\n                    case \"auth/invalid-email\":\r\n                        setEmailError(err.message);\r\n                        break;\r\n                    case \"auth/weak-password\":\r\n                        setPasswordError(err.message);\r\n                        break;\r\n                }\r\n            })\r\n    }\r\n\r\n    const  handleLogout = ()=>{\r\n        fire.auth().signOut();\r\n    }\r\n\r\n    const  authListener = ()=>{\r\n        fire.auth().onAuthStateChanged(user =>{\r\n            if (user){\r\n                clearInputs()\r\n                // setUser(user)\r\n                dispatch({ type: 'SET_USERS', payload:user })\r\n            }else {\r\n                // setUser(\"\")\r\n                dispatch({ type: 'SET_USERS', payload: user })\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(()=>{\r\n        authListener();\r\n        upload()\r\n\r\n\r\n    },[])\r\n\r\n    const upload = async ()=>{\r\n\r\n        try {\r\n            const items = await base.database().ref('items/');\r\n            items.on('value', (snapshot) => {\r\n                const data = snapshot.val();\r\n\r\n                if (data == null){\r\n                    let nameLengths = [];\r\n                    dispatch({ type: 'SET_ITEMS', payload:nameLengths })\r\n                }else {\r\n                    let nameLengths = Object.values(data);\r\n                    // dispatchItems(setCount(nameLengths))\r\n                    dispatch({ type: 'SET_ITEMS', payload:nameLengths })\r\n                }\r\n\r\n            });\r\n        }catch (e){\r\n            console.log(e.message)\r\n        }\r\n    };\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        {stateUsers ? (\r\n            <Navbar handleLogout={handleLogout}/>\r\n        ):(\r\n            <Authorization email={email}\r\n                           setEmail={setEmail}\r\n                           password={password}\r\n                           setPassword={setPassword}\r\n                           handLelogin={handleLogin}\r\n                           handLeSignup={handleSignup}\r\n                           hasAccount={hasAccount}\r\n                           setHasAccount={setHasAccount}\r\n                           emailError={emailError}\r\n                           passwordError={passwordError}\r\n            />\r\n        )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\andrey\\WebstormProjects\\react\\src\\reduсers\\index.js",[],"C:\\Users\\andrey\\WebstormProjects\\react\\src\\firebase.js",[],"C:\\Users\\andrey\\WebstormProjects\\react\\src\\reduсers\\itemsStore.js",[],"C:\\Users\\andrey\\WebstormProjects\\react\\src\\components\\navbar.js",[],"C:\\Users\\andrey\\WebstormProjects\\react\\src\\components\\authorization.js",["57","58"],"import React from 'react';\r\nimport '../scss/authorization.scss'\r\n\r\nconst Authorization = (props)=>{\r\n    const {\r\n        email,\r\n        setEmail,\r\n        password,\r\n        setPassword,\r\n        handLelogin,\r\n        handLeSignup,\r\n        hasAccount,\r\n        setHasAccount,\r\n        emailError,\r\n        setEmailError,\r\n        passwordError,\r\n        setPasswordError\r\n    } = props\r\n    return(\r\n        <div className={'authorization'}>\r\n            <div className={'authorizationContainer'}>\r\n                <label>Username</label>\r\n                <input type=\"text\"\r\n                       autoFocus\r\n                       required\r\n                       value={email}\r\n                onChange={\r\n                    (e)=>\r\n                        setEmail(e.target.value)\r\n                }/>\r\n                <p className={'errorMsg'}>{emailError}</p>\r\n                <label>Password</label>\r\n                <input type=\"password\"\r\n                required\r\n                value={password}\r\n                onChange={(e)=>\r\n                    setPassword(e.target.value)\r\n                }/>\r\n                <p className={'errorMsg'}>{passwordError}</p>\r\n                <div className=\"btnContainer\">\r\n                    {hasAccount?(\r\n                        <>\r\n                            <button onClick={handLelogin}>Войти</button>\r\n                            <p>Нету аккаунта ?\r\n                                <span onClick={()=> setHasAccount(!hasAccount)}>Зарегистрироваться</span></p>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <button onClick={handLeSignup}>Зарегистрироваться</button>\r\n                            <p>Есть аккаунт ?\r\n                                <span onClick={()=> setHasAccount(!hasAccount)}>Войти</span></p>\r\n                        </>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Authorization;","C:\\Users\\andrey\\WebstormProjects\\react\\src\\pages\\PagesEditingItem.js",["59"],"import React from 'react';\r\nimport {useSelector} from \"react-redux\";\r\nimport '../scss/pagesaddItem.scss'\r\nimport storage from \"../firebase\";\r\nimport base from \"../firebase\";\r\n\r\nconst PagesEditingItem = () => {\r\n    let nameRef = React.createRef();\r\n    let imagesRef = React.createRef();\r\n    let descriptionRef = React.createRef();\r\n    let priceRef = React.createRef();\r\n    let salePriceRef = React.createRef();\r\n    let saleDateRef = React.createRef();\r\n    const count = useSelector(state => state.storeItems.items)\r\n\r\n    const editionItem = (e, itemID)=>{\r\n        console.log(itemID,'id')\r\n        e.preventDefault()\r\n\r\n        const item = {\r\n            name: nameRef.current.value,\r\n            images: imagesRef.current.files[0],\r\n            description: descriptionRef.current.value,\r\n            price: parseFloat(priceRef.current.value),\r\n            salePrice: parseFloat(salePriceRef.current.value),\r\n            itemID: itemID,\r\n            saleDate: parseFloat(saleDateRef.current.value),\r\n        }\r\n        item.price = parseFloat(priceRef.current.value * salePriceRef.current.value / 100)\r\n\r\n        let date = new Date();\r\n        date.toLocaleDateString(\"en-US\")\r\n        date.setDate(date.getDate() + parseFloat(saleDateRef.current.value))\r\n        item.saleDate = date.toLocaleDateString(\"en-GB\")\r\n\r\n        let database = async ()=> {\r\n            try {\r\n\r\n                const dowlandStoragee = await storage.storage().ref().child('images/' + item.images.name).put(item.images)\r\n\r\n                const linkDowlandStorage = await dowlandStoragee.ref.getDownloadURL()\r\n\r\n                const db = await base.database().ref('items/' + itemID)\r\n                const push = db.set({\r\n                    name: item.name,\r\n                    images: item.images.name,\r\n                    imagesLink: linkDowlandStorage,\r\n                    description: item.description,\r\n                    price: item.price,\r\n                    salePrice: item.salePrice,\r\n                    itemID: item.itemID,\r\n                    saleDate: item.saleDate,\r\n                })\r\n\r\n\r\n            } catch (e) {\r\n\r\n                console.log(e.message)\r\n            }\r\n        }\r\n        database()\r\n        e.currentTarget.reset()\r\n        alert('Форма c изминенениями отправилась')\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>{count.length ? 'Редактировать товар' : 'Добавьте товар для редактирование его '}</h2>\r\n\r\n            <div className={'container'}>\r\n                {count.map((item,index)=>\r\n                    <div key={index} className={'items'}>\r\n                        <form action=\"\" className={'addItems'} onSubmit={(e)=> editionItem(e,item.itemID,item.imagesLink)}>\r\n                            <input  ref={nameRef} type=\"text\" name={'name'} defaultValue={item.name} placeholder={'Name'} autoComplete={'off'} minLength={20} maxLength={60} required/>\r\n                            <img src={item.imagesLink} alt=\"item.images\"/>\r\n                            <input ref={imagesRef} type=\"file\" name={'images'}  placeholder={'Images'} autoComplete={'off'} required />\r\n                            <textarea ref={descriptionRef}  name={'description'} defaultValue={item.description} placeholder={'Description'} autoComplete={'off'} maxLength={200} required/>\r\n                            <input  ref={priceRef} type=\"number\" name={'price'} defaultValue={item.price}  placeholder={'Price'} required max={'99999999.99'} min={0} step={'any'} />\r\n                            <input ref={salePriceRef} type=\"number\" name={'salePrice'} defaultValue={item.salePrice} min={10} max={90} placeholder={'Sale Price %'} id={'salePrice'} required/>\r\n                            <input  ref={saleDateRef} type=\"text\" name={'saleDate'} defaultValue={item.saleDate} min={0}  placeholder={'Sale Date'} required/>\r\n                            <button type={\"submit\"}>Редактировать</button>\r\n                        </form>\r\n                    </div>\r\n\r\n                )}\r\n            </div>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PagesEditingItem;\r\n","C:\\Users\\andrey\\WebstormProjects\\react\\src\\pages\\Listitems.js",["60","61"],"import React from 'react';\r\nimport base from \"../firebase\";\r\nimport '../scss/listitems.scss'\r\nimport storage from \"../firebase\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Listitems = ()=> {\r\n    const count = useSelector(state => state.storeItems.items)\r\n    const deleteItems = async (itemID,images)=>{\r\n        try {\r\n            const deleteItemDb = await base.database().ref('items/'+ itemID).remove()\r\n            const deleteItemStorage = await storage.storage().ref().child('images/' + images).delete()\r\n\r\n        }catch (e){\r\n            console.log(e.message)\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <h2>{count.length ? 'Список товаров' : 'Данных нет'}</h2>\r\n            <div className={'container'}>\r\n                {count.map((item, index)=>\r\n                    <div key={index} className={'items'}>\r\n                        <img src={item.imagesLink} alt={item.images}/>\r\n                        <li>Название товара: <br/> {item.name}</li>\r\n                        <li>Описание товара: <br/>{item.description}</li>\r\n                        <li>Цена со скидкой: <br/>{item.price}</li>\r\n                        <li>Скидка: <br/> {item.salePrice}</li>\r\n                        <li>Действие скидки: <br/> {item.saleDate}</li>\r\n                        <button onClick={()=> deleteItems(item.itemID,item.images)}>Удалить</button>\r\n                        <Link to=\"/PagesEditingItem\"><button>Редактирование товара</button></Link>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Listitems ;\r\n","C:\\Users\\andrey\\WebstormProjects\\react\\src\\pages\\PagesaddItem.js",["62"],"import React from 'react';\r\nimport '../scss/pagesaddItem.scss'\r\nimport base from \"../firebase\";\r\nimport storage from \"../firebase\";\r\n\r\n\r\nconst PagesaddItem  = ()=> {\r\n\r\n   let nameRef = React.createRef();\r\n   let imagesRef = React.createRef();\r\n   let descriptionRef = React.createRef();\r\n   let priceRef = React.createRef();\r\n   let salePriceRef = React.createRef();\r\n   let saleDateRef = React.createRef();\r\n\r\n    const creatItems = (e) => {\r\n        e.preventDefault()\r\n        const item = {\r\n            name: nameRef.current.value,\r\n            images: imagesRef.current.files[0],\r\n            description: descriptionRef.current.value,\r\n            price: parseFloat(priceRef.current.value),\r\n            salePrice: parseFloat(salePriceRef.current.value),\r\n            saleDate: parseFloat(saleDateRef.current.value),\r\n        }\r\n        item.price = parseFloat(priceRef.current.value * salePriceRef.current.value / 100)\r\n\r\n        let date = new Date();\r\n        date.toLocaleDateString(\"en-US\")\r\n        date.setDate(date.getDate() + parseFloat(saleDateRef.current.value))\r\n        item.saleDate = date.toLocaleDateString(\"en-GB\")\r\n\r\n        let database = async ()=> {\r\n            try {\r\n                const dowlandStoragee = await storage.storage().ref().child('images/' + item.images.name).put(item.images)\r\n\r\n                const linkDowlandStorage = await dowlandStoragee.ref.getDownloadURL()\r\n\r\n                const db = await base.database().ref('items/').push()\r\n\r\n                const pushDB =  db.set({\r\n                            name: item.name,\r\n                            images: item.images.name,\r\n                            imagesLink: linkDowlandStorage,\r\n                            description: item.description,\r\n                            price: item.price,\r\n                            salePrice: item.salePrice,\r\n                            saleDate: item.saleDate,\r\n                            itemID: db.ref.key,\r\n                })\r\n\r\n            } catch (e) {\r\n                console.log(e.message)\r\n            }\r\n        }\r\n        database()\r\n        e.currentTarget.reset()\r\n        alert('Форма отправилась')\r\n\r\n    }\r\n        return (\r\n            <section>\r\n                <h2>Добавить товар</h2>\r\n                <form action=\"\" className={'addItems'} onSubmit={creatItems}>\r\n                    <input ref={nameRef} type=\"text\" name={'name'} placeholder={'Название товара'} autoComplete={'off'} minLength={20} maxLength={60} required/>\r\n                    <input ref={imagesRef} type=\"file\" name={'images'} autoComplete={'off'}  required />\r\n                    <textarea  ref={descriptionRef} name={'description'} placeholder={'Описание'} autoComplete={'off'} maxLength={200} required/>\r\n                    <input  ref={priceRef} type=\"number\" name={'price'} placeholder={'Цена'} required max={'99999999.99'} min={0} step={'any'}/>\r\n                    <input ref={salePriceRef} type=\"number\" name={'salePrice'} min={10} max={90} placeholder={'% скидки'} id={'salePrice'} required/>\r\n                    <input ref={saleDateRef} type=\"number\" name={'saleDate'} min={0}  placeholder={'Дата окончание скидки'} required/>\r\n                    <button type={\"submit\"}>Добавить</button>\r\n                </form>\r\n            </section>\r\n        );\r\n}\r\n\r\nexport default PagesaddItem;\r\n",{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":38,"column":17,"nodeType":"69","messageId":"70","endLine":47,"endColumn":18},{"ruleId":"67","severity":1,"message":"68","line":56,"column":17,"nodeType":"69","messageId":"70","endLine":64,"endColumn":18},{"ruleId":"71","severity":1,"message":"72","line":90,"column":7,"nodeType":"73","endLine":90,"endColumn":9,"suggestions":"74"},{"ruleId":"75","severity":1,"message":"76","line":15,"column":9,"nodeType":"77","messageId":"78","endLine":15,"endColumn":22},{"ruleId":"75","severity":1,"message":"79","line":17,"column":9,"nodeType":"77","messageId":"78","endLine":17,"endColumn":25},{"ruleId":"75","severity":1,"message":"80","line":44,"column":23,"nodeType":"77","messageId":"78","endLine":44,"endColumn":27},{"ruleId":"75","severity":1,"message":"81","line":12,"column":19,"nodeType":"77","messageId":"78","endLine":12,"endColumn":31},{"ruleId":"75","severity":1,"message":"82","line":13,"column":19,"nodeType":"77","messageId":"78","endLine":13,"endColumn":36},{"ruleId":"75","severity":1,"message":"83","line":41,"column":23,"nodeType":"77","messageId":"78","endLine":41,"endColumn":29},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'authListener' and 'upload'. Either include them or remove the dependency array.","ArrayExpression",["86"],"no-unused-vars","'setEmailError' is assigned a value but never used.","Identifier","unusedVar","'setPasswordError' is assigned a value but never used.","'push' is assigned a value but never used.","'deleteItemDb' is assigned a value but never used.","'deleteItemStorage' is assigned a value but never used.","'pushDB' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},"Update the dependencies array to be: [authListener, upload]",{"range":"89","text":"90"},[2630,2632],"[authListener, upload]"]